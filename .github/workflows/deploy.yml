name: Terraform Deploy

on:
  push:
    branches:
      - main    # Run on push to main branch
  workflow_dispatch:   # Allow manual trigger from GitHub UI

permissions:
  id-token: write      # Required for AWS OIDC authentication
  contents: read
  security-events: write  # Required to upload SARIF scan results to GitHub Security tab

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: environments/dev   # Set the working directory for all steps

    # Load Terraform variables from GitHub Environment Secrets
    env:
      TF_VAR_env: ${{ secrets.TF_VAR_env }}
      TF_VAR_aws_region: ${{ secrets.TF_VAR_aws_region }}
      TF_VAR_vpc_cidr: ${{ secrets.TF_VAR_vpc_cidr }}
      TF_VAR_public_subnet_a_cidr: ${{ secrets.TF_VAR_public_subnet_a_cidr }}
      TF_VAR_public_subnet_b_cidr: ${{ secrets.TF_VAR_public_subnet_b_cidr }}
      TF_VAR_default_route_cidr: ${{ secrets.TF_VAR_default_route_cidr }}
      TF_VAR_availability_zone_a: ${{ secrets.TF_VAR_availability_zone_a }}
      TF_VAR_availability_zone_b: ${{ secrets.TF_VAR_availability_zone_b }}
      TF_VAR_instance_type: ${{ secrets.TF_VAR_instance_type }}
      TF_VAR_ec2_role_name: ${{ secrets.TF_VAR_ec2_role_name }}
      TF_VAR_bucket_name: ${{ secrets.TF_VAR_bucket_name }}
      TF_VAR_logging_target_bucket: ${{ secrets.TF_VAR_logging_target_bucket }}
      TF_VAR_replication_target_bucket: ${{ secrets.TF_VAR_replication_target_bucket }}

    steps:
      # Step 1: Checkout the source code from the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Configure AWS credentials using OIDC (secure short-lived credentials)
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::055714170174:role/github-action-workflow
          aws-region: us-west-2
          role-session-name: GitHubActions-${{ github.run_id }}

      # Step 3: Install Terraform CLI
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      # Step 4: Initialize Terraform with the backend and provider configurations
      - name: Terraform Init
        run: terraform init -reconfigure

      # Step 5: Check Terraform file formatting
      - name: Terraform Format Check
        run: find . -type f -name "*.tf" -exec terraform fmt -check {} +

      # Step 6: Validate Terraform configuration syntax
      - name: Terraform Validate
        run: terraform validate

      # Step 7: Run Checkov security scan using a centralized config file
      - name: Run Checkov Security Scan
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: environments/dev
          config-file: .checkov.yml
          output_format: sarif
          output_file_path: checkov-results/checkov-results.sarif
          soft_fail: true    # Continue the pipeline even if Checkov finds issues

      # Step 8: Upload the Checkov scan results to GitHub Security tab
      - name: Upload Checkov SARIF results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-results/checkov-results.sarif

      # Step 9: Generate the Terraform plan
      - name: Terraform Plan
        run: terraform plan -out=tfplan.binary

      # Step 10: Upload the Checkov scan result as an artifact for later download
      - name: Upload Security Report
        if: always()   # Always run, even if previous steps failed
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: checkov-results/checkov-results.sarif
          retention-days: 3

      # Step 11: Apply the Terraform plan (only for manual runs, for safety)
      - name: Terraform Apply (manual approval)
        if: github.event_name == 'workflow_dispatch'
        run: terraform apply -auto-approve tfplan.binary

      # Step 12: Clean up the Terraform plan file
      - name: Cleanup Plan Files
        if: always()   # Always clean up to avoid leaving files in the runner
        run: rm -f tfplan.binary
