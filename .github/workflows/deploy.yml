name: Terraform Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  security-events: write  # Required for uploading SARIF to GitHub Security tab

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: environments/dev

    steps:
      # Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Configure AWS credentials via OIDC
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::055714170174:role/github-action-workflow
          aws-region: us-west-2
          role-session-name: GitHubActions-${{ github.run_id }}

      # Step 3: Set up Terraform CLI
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      # Step 4: Initialize Terraform
      - name: Terraform Init
        run: terraform init -reconfigure

      # Step 5: Create terraform.tfvars file
      - name: Create terraform.tfvars file
        run: |
          cat <<EOF > terraform.tfvars
          env = "dev"
          aws_region = "us-west-2"
          bucket_name = "example-bucket"
          replication_target_bucket = "replication-bucket"
          logging_target_bucket = "logging-bucket"
          vpc_cidr = "10.0.0.0/16"
          public_subnet_a_cidr = "10.0.1.0/24"
          public_subnet_b_cidr = "10.0.2.0/24"
          EOF

      # Step 6: Terraform Format Check
      - name: Terraform Format Check
        run: find . -type f -name "*.tf" -exec terraform fmt -check {} +

      # Step 7: Terraform Validate
      - name: Terraform Validate
        run: terraform validate

      # Step 8: Run Checkov Security Scan using centralized config
      - name: Run Checkov Security Scan
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: environments/dev                           # Scan this directory
          config-file: .checkov.yml                             # Centralized Checkov config
          output_format: sarif
          output_file_path: checkov-results/checkov-results.sarif
          soft_fail: true                                       # Continue pipeline even on failures

      # Step 9: Upload Checkov SARIF results to GitHub Security tab
      - name: Upload Checkov SARIF results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-results/checkov-results.sarif

      # Step 10: Terraform Plan
      - name: Terraform Plan
        run: terraform plan -var-file="terraform.tfvars" -out=tfplan.binary

      # Step 11: Upload the Checkov scan result as an artifact for reference
      - name: Upload Security Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: checkov-results/checkov-results.sarif
          retention-days: 3

      # Step 12: Terraform Apply (manual trigger only)
      - name: Terraform Apply (manual approval)
        if: github.event_name == 'workflow_dispatch'
        run: terraform apply -auto-approve tfplan.binary

      # Step 13: Cleanup Terraform plan files and tfvars
      - name: Cleanup Plan Files
        if: always()
        run: |
          rm -f tfplan.binary
          rm -f terraform.tfvars
