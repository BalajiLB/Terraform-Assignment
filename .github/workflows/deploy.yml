name: Terraform Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  security-events: write

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: environments/dev

    env:
      TF_VAR_env: ${{ secrets.TF_VAR_env }}
      TF_VAR_aws_region: ${{ secrets.TF_VAR_aws_region }}
      TF_VAR_vpc_cidr: ${{ secrets.TF_VAR_vpc_cidr }}
      TF_VAR_public_subnet_a_cidr: ${{ secrets.TF_VAR_public_subnet_a_cidr }}
      TF_VAR_public_subnet_b_cidr: ${{ secrets.TF_VAR_public_subnet_b_cidr }}
      TF_VAR_default_route_cidr: ${{ secrets.TF_VAR_default_route_cidr }}
      TF_VAR_availability_zone_a: ${{ secrets.TF_VAR_availability_zone_a }}
      TF_VAR_availability_zone_b: ${{ secrets.TF_VAR_availability_zone_b }}
      TF_VAR_instance_type: ${{ secrets.TF_VAR_instance_type }}
      TF_VAR_ec2_role_name: ${{ secrets.TF_VAR_ec2_role_name }}
      TF_VAR_bucket_name: ${{ secrets.TF_VAR_bucket_name }}
      TF_VAR_logging_target_bucket: ${{ secrets.TF_VAR_logging_target_bucket }}
      TF_VAR_replication_target_bucket: ${{ secrets.TF_VAR_replication_target_bucket }}
      TF_VAR_ingress_descriptions: ${{ secrets.TF_VAR_ingress_descriptions }}
      TF_VAR_ingress_from_ports: ${{ secrets.TF_VAR_ingress_from_ports }}
      TF_VAR_ingress_to_ports: ${{ secrets.TF_VAR_ingress_to_ports }}
      TF_VAR_ingress_protocols: ${{ secrets.TF_VAR_ingress_protocols }}
      TF_VAR_ingress_cidr_blocks: ${{ secrets.TF_VAR_ingress_cidr_blocks }}
      TF_VAR_egress_from_port: ${{ secrets.TF_VAR_egress_from_port }}
      TF_VAR_egress_to_port: ${{ secrets.TF_VAR_egress_to_port }}
      TF_VAR_egress_protocol: ${{ secrets.TF_VAR_egress_protocol }}
      TF_VAR_egress_cidr_blocks: ${{ secrets.TF_VAR_egress_cidr_blocks }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::055714170174:role/github-action-workflow
          aws-region: us-west-2
          role-session-name: GitHubActions-${{ github.run_id }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Check AWS Identity & Region
        run: |
          echo "Caller Identity:"
          aws sts get-caller-identity

          echo "Describe Lock Table:"
          aws dynamodb describe-table --table-name terraform-locks

          echo "List Lock Table Items:"
          aws dynamodb scan --table-name terraform-locks

      - name: Test EC2 DescribeImages Permission
        run: |
          aws ec2 describe-images --owners amazon --filters "Name=name,Values=amzn2-ami-hvm-*-x86_64-gp2" --query "Images[0].ImageId"

      - name: Terraform Init
        run: terraform init -reconfigure -no-color

      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Run Checkov Security Scan
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: environments/dev
          config-file: .checkov.yml
          output_format: sarif
          output_file_path: checkov-results/checkov-results.sarif
          soft_fail: true

      - name: Upload Checkov SARIF results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-results/checkov-results.sarif

      - name: Terraform Plan
        run: TF_LOG=DEBUG terraform plan -out=tfplan.binary -no-color -lock-timeout=300s

      - name: Upload Security Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: checkov-results/checkov-results.sarif
          retention-days: 3

      - name: Terraform Apply (manual approval)
        if: github.event_name == 'workflow_dispatch'
        run: terraform apply -auto-approve tfplan.binary

      - name: Cleanup Plan Files
        if: always()
        run: rm -f tfplan.binary
